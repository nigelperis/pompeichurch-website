---
const languages = ['English', 'ಕೊಂಕಣಿ'];
const currentLocale = Astro.currentLocale;
import { cn } from '~/helpers/cn';
import { getLangFromUrl } from '~/i18n/utils';
import { Icon } from 'astro-icon/components';

const selectedLanguage = currentLocale === 'kok' ? 'ಕೊಂಕಣಿ' : 'English';
const lang = getLangFromUrl(Astro.url);
---

<div class="relative inline-block text-left">
	<div class="mt-2 lg:mt-[3px]">
		<button
			type="button"
			id="lang-button"
			class={cn(
				'inline-flex font-poppins font-semibold justify-center rounded-md border border-gray-500 px-2 pt-2 pb-1 xs:-mt-1 hover:bg-natgeo-yellow',
				lang === 'kok' &&
					'font-noto-sans-kannada text-sm xs:pt-2 xs:font-semibold lg:pt-3',
			)}
			style="line-height: 1;"
		>
			{selectedLanguage}
			<Icon
				name="chevron-down"
				id="lang-arrow"
				class="-mr-1 h-5 w-5 transition-transform duration-300 ease-in-out"
			/>
		</button>
	</div>
	<div
		id="lang-dropdown"
		class="absolute mt-2 w-full rounded-md bg-white p-2 shadow-md"
		role="menu"
		aria-orientation="vertical"
		aria-labelledby="options-menu"
	>
		<div>
			{
				languages.map((lang) => (
					<button
						type="button"
						class={cn(
							'text-md font-poppins hover:bg-natgeo-yellow w-full rounded-md py-2 text-sm font-normal transition-all',
							selectedLanguage === lang && 'font-noto-sans-kannada',
						)}
					>
						{lang}
					</button>
				))
			}
		</div>
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const button = document.getElementById(
			'lang-button',
		) as HTMLButtonElement | null;
		const dropdown = document.getElementById(
			'lang-dropdown',
		) as HTMLElement | null;
		const arrow = document.getElementById('lang-arrow') as HTMLElement | null;

		if (!button || !dropdown || !arrow) return;

		window.addEventListener('load', () => {
			button.removeAttribute('disabled');
		});

		const handleLanguageChange = (lang: string): void => {
			button.innerHTML = 'Loading...';
			button.setAttribute('disabled', 'true');

			const currentPath = window.location.pathname;
			const pathWithLocaleStripped = currentPath.replace(/^\/kok\//, '/');
			const localeToSwitchTo = lang === 'ಕೊಂಕಣಿ' ? 'kok' : 'en';
			const newPath =
				localeToSwitchTo === 'kok'
					? `/${localeToSwitchTo}${pathWithLocaleStripped}`
					: `${pathWithLocaleStripped}`;

			window.location.href = newPath;
		};

		const toggleDropdown = (): void => {
			const isVisible = dropdown.classList.contains('visible');
			dropdown.classList.toggle('visible', !isVisible);
			dropdown.style.opacity = isVisible ? '0' : '1';
			dropdown.style.visibility = isVisible ? 'hidden' : 'visible';
			arrow.classList.toggle('rotate-180', !isVisible);
		};

		button.addEventListener('click', (e: MouseEvent) => {
			e.stopPropagation();
			toggleDropdown();
		});

		document.addEventListener('click', () => {
			dropdown.classList.remove('visible');
			dropdown.style.opacity = '0';
			dropdown.style.visibility = 'hidden';
			arrow.classList.remove('rotate-180');
		});

		button.addEventListener('mouseenter', () => {
			if (window.innerWidth > 768) {
				dropdown.classList.add('visible');
				dropdown.style.opacity = '1';
				dropdown.style.visibility = 'visible';
				arrow.classList.add('rotate-180');
			}
		});

		dropdown.addEventListener('mouseenter', () => {
			dropdown.classList.add('visible');
			dropdown.style.opacity = '1';
			dropdown.style.visibility = 'visible';
			arrow.classList.add('rotate-180');
		});

		const hideDropdownWithDelay = (): void => {
			if (window.innerWidth > 768) {
				setTimeout(() => {
					if (!dropdown?.matches(':hover')) {
						dropdown.classList.remove('visible');
						dropdown.style.opacity = '0';
						dropdown.style.visibility = 'hidden';
						arrow.classList.remove('rotate-180');
					}
				}, 100);
			}
		};

		button.addEventListener('mouseleave', hideDropdownWithDelay);
		dropdown.addEventListener('mouseleave', hideDropdownWithDelay);

		document
			.querySelectorAll<HTMLButtonElement>('#lang-dropdown button')
			.forEach((btn) => {
				btn.addEventListener('click', (e: MouseEvent) => {
					const target = e.target as HTMLButtonElement;
					handleLanguageChange(target.innerText);
				});
			});
	});
</script>

<style>
	.relative:hover #lang-dropdown {
		opacity: 1;
		visibility: visible;
		transform: translateY(0);
	}

	#lang-dropdown {
		opacity: 0;
		visibility: hidden;
		transition:
			opacity 0.3s ease-in-out,
			visibility 0.3s ease-in-out;
	}

	.visible {
		opacity: 1;
		visibility: visible;
	}
	.rotate-180 {
		transform: rotate(180deg);
	}
</style>
