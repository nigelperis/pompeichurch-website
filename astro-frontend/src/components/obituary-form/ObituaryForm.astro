---
import ChevronDown from '~/assets/icons/chevron-down.svg';
import CalendarDays from '~/assets/icons/calendar-days.svg';
import ObituaryPreview from './ObituaryPreview';

const { labels } = Astro.props;
const t = labels;
---

<main class="mx-auto max-w-5xl bg-white">
  <div class="px-4 py-10 sm:px-6 lg:px-8">
    <h1 class="font-roboto font-black border-natgeo-yellow mb-6 border-l-4 pl-3 text-3xl lg:text-4xl">
      {t.title}
    </h1>
    <div class="flex flex-col lg:flex-row gap-10">
      <form class="flex-1 space-y-6" enctype="multipart/form-data" id="obituaryForm">
        <!-- Full Name English -->
        <div>
          <label for="englishName" class="block text-sm font-medium text-gray-700 mb-1">
            {t.nameEn} <span class="text-red-600">*</span>
          </label>
          <input type="text" name="englishName" id="englishName" required placeholder={t.nameEnPH}
            class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
        </div>

        <!-- Full Name Konkani -->
        <div>
          <label for="konkaniName" class="block text-sm font-medium text-gray-700 mb-1">
            {t.nameKok}
          </label>
          <input type="text" name="konkaniName" id="konkaniName" placeholder={t.nameKokPH}
            class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
        </div>

        <!-- Age -->
        <div>
          <label for="age" class="block text-sm font-medium text-gray-700 mb-1">
            {t.age} <span class="text-red-600">*</span>
          </label>
          <input type="number" name="age" id="age" required min="0" placeholder={t.agePH}
            class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
        </div>

        <!-- Ward -->
        <div class="relative">
          <label for="ward" class="block text-sm font-medium text-gray-700 mb-1">
            {t.ward} <span class="text-red-600">*</span>
          </label>
          <select name="ward" id="ward" required
            class="block w-full border border-gray-300 p-3 pr-10 appearance-none focus:outline-none text-gray-700">
            <option value="" disabled selected>{t.wardPH}</option>
            <option value="Addoor">Addoor</option>
            <option value="Church">Church</option>
            <option value="Gurpur">Gurpur</option>
            <option value="Kandar A">Kandar A</option>
            <option value="Kandar B">Kandar B</option>
            <option value="Kowdoor A">Kowdoor A</option>
            <option value="Kowdoor B">Kowdoor B</option>
            <option value="Monel">Monel</option>
            <option value="Pompei A">Pompei A</option>
            <option value="Pompei B">Pompei B</option>
          </select>
          <!-- Dropdown Icon -->
          <div class="pointer-events-none absolute right-3 top-1/2 text-gray-600">
            <ChevronDown class="w-6 h-6" />
          </div>
        </div>

        <!-- Date of Death -->
        <div class="relative">
          <label for="dateOfDeath" class="block text-sm font-medium text-gray-700 mb-1">
            {t.death} <span class="text-red-600">*</span>
          </label>
          <input type="date" name="dateOfDeath" id="dateOfDeath"
            class="custom-date-picker block w-full text-gray-700 border border-gray-300 p-3 pr-10 appearance-none focus:outline-none"
            required placeholder="DD/MM/YYYY" />
          <!-- Dropdown Icon -->
          <div class="pointer-events-none absolute right-3 top-1/2 text-gray-600">
            <CalendarDays class="w-5 h-5" />
          </div>
        </div>

        <!-- Relation Type -->
        <div class="relative">
          <label for="relationType" class="block text-sm font-medium text-gray-700 mb-1">
            {t.relType}
          </label>
          <select name="relationType" id="relationType"
            class="block text-gray-700 w-full border border-gray-300 p-3 pr-10 appearance-none focus:outline-none placeholder-gray-600">
            <option value="" disabled selected>{t.relTypePH}</option>
            <option value="W/O">Wife of</option>
            <option value="H/O">Husband of</option>
            <option value="S/O">Son of</option>
            <option value="D/O">Daughter of</option>
          </select>
          <!-- Dropdown Icon -->
          <div class="pointer-events-none absolute right-3 top-1/2 text-gray-600">
            <ChevronDown class="w-6 h-6" />
          </div>
        </div>

        <!-- Relative's Name -->
        <div>
          <label for="relNameEn" class="block text-sm font-medium text-gray-700 mb-1">
            {t.relNameEn}
          </label>
          <input type="text" name="relNameEn" id="relNameEn" placeholder={t.relNameEnPH}
            class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
        </div>

        <div>
          <label for="relNameKok" class="block text-sm font-medium text-gray-700 mb-1">
            {t.relNameKok}
          </label>
          <input type="text" name="relNameKok" id="relNameKok" placeholder={t.relNameKokPH}
            class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
        </div>

        <!-- Sender Name -->
        <div>
          <label for="senderName" class="block text-sm font-medium text-gray-700 mb-1">
            {t.sender} <span class="text-red-600">*</span>
          </label>
          <input type="text" name="senderName" id="senderName" required placeholder={t.senderPH}
            class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
        </div>

        <!-- Honeypot Spam Trap (hidden) -->
        <div class="hidden">
          <label for="website">Website</label>
          <input type="text" name="website" id="website" tabindex="-1" autocomplete="off" />
        </div>

        <!-- Upload Image -->
        <div>
          <label for="imageFile" class="block text-sm font-medium text-gray-600 mb-1">
            {t.image} <span class="text-red-600">*</span>
          </label>
          <input type="file" name="imageFile" id="imageFile" accept="image/*" required
            class="w-full text-gray-600 font-medium text-sm bg-white border border-gray-300 file:cursor-pointer cursor-pointer file:border-0 file:py-3 file:px-4 file:mr-4 file:bg-gray-100 file:hover:bg-gray-200 file:text-gray-600" />
          <p class="text-xs text-red-600 mt-1">{t.imageHelp}</p>
        </div>

        <!-- Submit Button -->
        <div class="flex justify-center">
          <button type="submit"
            class="min-w-48 w-fit font-semibold bg-natgeo-yellow border-3 border-amber-300 hover:bg-amber-300 py-2 px-6 cursor-pointer">
            {t.submit}
          </button>
        </div>

        <p id="submit-status" class="text-center text-sm text-gray-600"></p>
      </form>

      <!-- Preview(Used REACT) -->
      <div class="w-full lg:w-[260px] space-y-2">
        <h2 class="text-lg font-semibold text-gray-700">{t.preview}</h2>
        <ObituaryPreview labels={Astro.props.labels} lang={Astro.props.lang} client:load />
      </div>
    </div>
  </div>

  <!-- Toast Notification -->
  <div id="toast"
    class="fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-green-600 text-white px-4 py-3 text-sm font-semibold z-50 opacity-0 transition-opacity duration-300 pointer-events-none">
    {t.toastMsg}
  </div>

<script>
    import { sendReviewWithAttachment } from "~/helpers/send-obituary-mail";

    // Emit form update event
    function emitFormUpdate() {
      const form = document.getElementById("obituaryForm");
      if (!(form instanceof HTMLFormElement)) return;
      const formData = new FormData(form);
      const detail = {
        englishName: formData.get("englishName") || "",
        konkaniName: formData.get("konkaniName") || "",
        relationType: formData.get("relationType") || "",
        relNameEn: formData.get("relNameEn") || "",
        relNameKok: formData.get("relNameKok") || "",
        age: formData.get("age") || "",
        ward: formData.get("ward") || "",
        dateOfDeath: formData.get("dateOfDeath") || "",
      };
      window.dispatchEvent(new CustomEvent("obituary-form-update", { detail }));
    }

    // Handle image file input
    function handleImageInput(event: Event) {
      const input = event.target;
      if (!(input instanceof HTMLInputElement) || !input.files || !input.files[0]) {
        window.dispatchEvent(new CustomEvent("obituary-image-preview", { detail: { imageUrl: "" } }));
        return;
      }
      const file = input.files[0];
      if (file.size > 500 * 1024) {
        alert("Image must be less than 500KB");
        input.value = "";
        window.dispatchEvent(new CustomEvent("obituary-image-preview", { detail: { imageUrl: "" } }));
        return;
      }
      const reader = new FileReader();
      reader.onload = () => {
        if (typeof reader.result === "string") {
          window.dispatchEvent(new CustomEvent("obituary-image-preview", { detail: { imageUrl: reader.result } }));
        }
      };
      reader.readAsDataURL(file);
    }

    // Show toast on form submission
    document.addEventListener("DOMContentLoaded", async () => {
      const form = document.getElementById("obituaryForm");
      if (form instanceof HTMLFormElement) {
        form.addEventListener("input", emitFormUpdate);
        emitFormUpdate(); // initial

        // Add handler for image file input
        const imageInput = form.querySelector('input[name="imageFile"]');
        if (imageInput instanceof HTMLInputElement) {
          imageInput.addEventListener("change", handleImageInput);
        }

        // showToast on submit
        form.addEventListener("submit", async (event) => {
          event.preventDefault();

          // Honeypot check
          const websiteInput = form.querySelector('input[name="website"]');
          if (websiteInput instanceof HTMLInputElement && websiteInput.value !== "") {
            alert("Spam detected.");
            return false;
          }

          const formData = new FormData(form);
          const imageFile = formData.get("imageFile");
          if (imageFile instanceof File && imageFile.size > 500 * 1024) {
            console.log("Image file detected:", imageFile.name, imageFile.size, imageFile.type);
            alert("Image must be less than 500KB");
            return;
          }

          try {
            for (const [key, value] of formData.entries()) {
  console.log(`${key}:`, value);
  if (value instanceof File) {
    console.log("File details:", value.name, value.size, value.type);
  }
}
            await sendReviewWithAttachment(formData);
            // Show Toast
            showToast();

            // Reset form and preview
            form.reset();
            emitFormUpdate();
            window.dispatchEvent(new CustomEvent("obituary-image-preview", { detail: { imageUrl: "" } }));
          }
          catch (err) {
            console.error(err);
            alert("There was an error submitting the form.");
          }
        });
      }
    });

    // Toast logic
    function showToast(message = "Your submission was successful!") {
      const toast = document.getElementById("toast");
      if (toast) {
        toast.textContent = message;
        toast.classList.remove("opacity-0");
        toast.classList.add("opacity-100");
        setTimeout(() => {
          toast.classList.remove("opacity-100");
          toast.classList.add("opacity-0");
        }, 6000);
      }
    }
</script>
</main>