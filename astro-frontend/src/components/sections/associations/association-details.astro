---
import { getLangFromUrl, useTranslations } from "~/i18n/utils";
import { listAssociations } from "~/services/associations/list-associations";
import { cn } from "~/helpers/cn";
import { Icon } from "astro-icon/components";
import { Locale } from "~/enums/locale";
import NetworkImage from "~/components/ui/network-image.astro";
import { getAssociation } from "~/services/associations/get-association";
import type { Association } from "~/models/association";
import { listEvents } from "~/services/events/list-events";
import EventCard from "~/components/event-card.astro";
import { getPlaceholderImage } from "~/helpers/get-placeholder-image";
import HoverableLink from "~/components/ui/hoverable-link.astro";
import StrapiBlocksRenderer from "~/components/ui/strapi-blocks-renderer.tsx";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { slug } = Astro.params as { slug: string };

// Fetch association by locale with fallback
const [assocPrimary, assocFallback] = await Promise.all([
  getAssociation({ slug, locale: lang as Locale }),
  getAssociation({ slug, locale: Locale.EN }),
]);

const association: Association | null = assocPrimary || assocFallback;

if (!association) {
  throw new Error(`Association not found for slug: ${slug}`);
}

const title = association.name;
const description = association.description ?? [];
const officeBearers = (association.officeBearers || [])
  .slice()
  .sort((a, b) => (a.order ?? 0) - (b.order ?? 0));

const eventsUrl =
  lang === Locale.KOK
    ? `/kok/associations/${slug}/events`
    : `/associations/${slug}/events`;

// Fetch recent events linked via relation
const allEvents = await listEvents({
  page: 1,
  pageSize: 6,
  sortBy: ["eventDate:desc"],
  filters: { "association.slug": { $eq: slug } },
});

const recentEvents = allEvents.events?.slice(0, 2) || [];
const totalEventCount = allEvents.events?.length ?? 0;
---

<div class="mx-auto">
  <div class="mt-2 flex justify-center">
    <NetworkImage
      src={association.groupImage?.url
        ? new URL(
            association.groupImage.url,
            import.meta.env.PUBLIC_STRAPI_URL,
          ).toString()
        : getPlaceholderImage({ text: association.name })}
      alt={`Members of ${title} at Our Lady of Pompei Church`}
      width={association.groupImage?.width || 600}
      height={association.groupImage?.height || 400}
    />
  </div>

  <h2
    class={cn("mt-6 text-justify text-2xl font-bold text-slate-900", {
      "font-bold": lang === Locale.KOK,
    })}
  >
    {t("associations.about-us")}
  </h2>
  {
    Array.isArray(description) && description.length > 0 ? (
      <StrapiBlocksRenderer
        client:load
        content={description}
        paraClassName={cn("mt-4 text-justify leading-7 text-slate-700 mb-4", {
          "font-normal": lang === Locale.KOK,
        })}
      />
    ) : null
  }

  {
    officeBearers.length > 0 && (
      <>
        <h2
          class={cn("font-bold mt-1 text-left text-2xl text-slate-900", {
            "font-bold sm:pt-1": lang === Locale.KOK,
          })}
        >
          {t("associations.office-bearers")}
        </h2>
        <ul
          class={cn("my-4 list-inside list-disc text-base text-slate-700", {
            "font-normal sm:pt-1": lang === Locale.KOK,
          })}
        >
          {officeBearers.map((bearer) => (
            <li class="text-left">
              <span class="text-slate-700 font-semibold">
                {bearer.roleTitle}:{" "}
              </span>
              {bearer.personName}
            </li>
          ))}
        </ul>
      </>
    )
  }
  {
    association.socialLinks && association.socialLinks.length > 0 && (
      <>
        <h2
          class={cn("mt-2 text-left text-2xl font-bold text-slate-900", {
            "font-bold sm:pt-1": lang === Locale.KOK,
          })}
        >
          {t("landing.follow-our-journey")}
        </h2>
        <div class="flex gap-8 md:gap-12">
          {association.socialLinks.map((link) => (
            <div class="mb-9 mt-4 h-5 w-5 transition-transform hover:scale-105 duration-300">
              <a href={link.url} target="_blank" rel="noopener noreferrer">
                <Icon name={link.platform} class="size-10 md:size-13" />
              </a>
            </div>
          ))}
        </div>
      </>
    )
  }

  {
    recentEvents.length > 0 && (
      <>
        <h2
          class={cn("font-bold mt-1 text-left text-2xl text-slate-900", {
            "font-bold sm:pt-1": lang === Locale.KOK,
          })}
        >
          {t("associations.events")}
        </h2>

        <div class="grid grid-cols-1 gap-8 sm:grid-cols-2 mt-4">
          {recentEvents.map((event) => (
            <EventCard
              eventName={event.englishTitle}
              eventNameKok={event.konkaniTitle}
              imageUrl={
                event.eventImage?.url
                  ? new URL(
                      event.eventImage?.url,
                      import.meta.env.PUBLIC_STRAPI_URL,
                    ).toString()
                  : getPlaceholderImage({ text: event.englishTitle })
              }
              imageWidth={event.eventImage?.width || 600}
              imageHeight={event.eventImage?.height || 400}
              shortDescriptionEn={event.shortDescriptionEn}
              shortDescriptionKok={event.shortDescriptionKok}
              facebookLink={event.facebookLink}
              slug={event.slug}
              instagramLink={event.instagramLink}
            />
          ))}
        </div>
      </>
    )
  }

  {
    totalEventCount > 2 && (
      <div class="flex justify-center">
        <HoverableLink href={eventsUrl} class="m-5">
          {t("ui.show-more-events")}
        </HoverableLink>
      </div>
    )
  }
</div>
