---
import { getLangFromUrl, useTranslations } from "~/i18n/utils";
import { cn } from "~/helpers/cn";
import { parseISO } from "date-fns";
import { fromZonedTime } from "date-fns-tz";

// Components
import { listUpcomingEvents } from "~/services/list-upcoming-events";
import NetworkImage from "~/components/ui/network-image.astro";
import EmblaCarousel from "~/components/ui/embla-carousel.astro";
import EmblaCarouselItem from "~/components/ui/embla-carousel-item.astro";
import { Image } from "astro:assets";

import stayTuned from "~/assets/static-assets/stay-tuned.png";
import stayTunedKok from "~/assets/static-assets/stay-tuned-kok.png";
import { getPlaceholderImage } from "~/helpers/get-placeholder-image";
import { Locale } from "~/enums/locale";
import NetworkVideo from "~/components/ui/network-video.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const today = new Date();

const upcomingEvents = await listUpcomingEvents();

const filteredEvents = upcomingEvents.filter((event) => {
  if (!event.eventEndDate) return false;
  const eventDate = parseISO(event.eventEndDate);
  return fromZonedTime(eventDate, "Asia/Kolkata") > today;
});
---

<section
  id="upcoming-events"
  class="mx-6 mb-6 mt-3 flex flex-col lg:mx-28 lg:min-h-[70svh] lg:justify-evenly"
>
  <h1
    data-aos="fade-right"
    class={cn(
      "font-black mb-4 inline-block border-l-4 border-natgeo-yellow pl-3 text-2xl lg:text-4xl",
      { "font-extrabold pt-2": lang === Locale.KOK },
    )}
  >
    {t("landing.upcoming-events")}
  </h1>

  {
    filteredEvents.length > 0 ? (
      <>
        {/* Mobile: Show carousel only if more than one item */}
        <div class="-mx-[1.5rem] block md:hidden p-2">
          {filteredEvents.length === 1 ? (
            <div class="event-gallery px-4">
              {filteredEvents[0].eventImage?.mime?.startsWith("video/") ? (
                <NetworkVideo
                  src={filteredEvents[0].eventImage.url}
                  class="w-full"
                  width={filteredEvents[0].eventImage.width || 0}
                  height={filteredEvents[0].eventImage.height || 0}
                  controls
                  muted
                  autoplay
                />
              ) : (
                <a
                  href="#"
                  role="button"
                  aria-label="Upcoming event"
                  data-pswp-src={
                    filteredEvents[0].eventImage?.url
                      ? new URL(
                          filteredEvents[0].eventImage.url,
                          import.meta.env.PUBLIC_STRAPI_URL,
                        ).toString()
                      : getPlaceholderImage({
                          text: filteredEvents[0].eventImage?.name,
                        })
                  }
                  data-pswp-width={filteredEvents[0].eventImage?.width}
                  data-pswp-height={filteredEvents[0].eventImage?.height}
                >
                  <NetworkImage
                    src={
                      filteredEvents[0].eventImage?.url
                        ? new URL(
                            filteredEvents[0].eventImage.url,
                            import.meta.env.PUBLIC_STRAPI_URL,
                          ).toString()
                        : getPlaceholderImage({
                            text: filteredEvents[0].eventImage?.name,
                          })
                    }
                    class="w-full"
                    width={filteredEvents[0].eventImage?.width || 0}
                    height={filteredEvents[0].eventImage?.height || 0}
                  />
                </a>
              )}
            </div>
          ) : (
            <div class="event-gallery">
              <EmblaCarousel showArrows={true}>
                {filteredEvents.map((event) => (
                  <EmblaCarouselItem>
                    {event.eventImage?.mime?.startsWith("video/") ? (
                      <NetworkVideo
                        src={event.eventImage.url}
                        class="w-full"
                        width={event.eventImage.width || 0}
                        height={event.eventImage.height || 0}
                        controls
                        muted
                        autoplay
                      />
                    ) : (
                      <a
                        href="#"
                        role="button"
                        aria-label="Upcoming event"
                        data-pswp-src={
                          event.eventImage?.url
                            ? new URL(
                                event.eventImage.url,
                                import.meta.env.PUBLIC_STRAPI_URL,
                              ).toString()
                            : getPlaceholderImage({
                                text: event.eventImage?.name,
                              })
                        }
                        data-pswp-width={event.eventImage?.width}
                        data-pswp-height={event.eventImage?.height}
                      >
                        <NetworkImage
                          src={
                            event.eventImage?.url
                              ? new URL(
                                  event.eventImage.url,
                                  import.meta.env.PUBLIC_STRAPI_URL,
                                ).toString()
                              : getPlaceholderImage({
                                  text: event.eventImage?.name,
                                })
                          }
                          class="w-full"
                          width={event.eventImage?.width || 0}
                          height={event.eventImage?.height || 0}
                        />
                      </a>
                    )}
                  </EmblaCarouselItem>
                ))}
              </EmblaCarousel>
            </div>
          )}
        </div>

        {/* Web UI */}
        <div class="event-gallery hidden items-center justify-center gap-4 md:flex">
          {filteredEvents.map((event) =>
            event.eventImage?.mime?.startsWith("video/") ? (
              <div class="transition-transform duration-300 ease-in-out hover:[transform:scale(1.02)] hover:shadow-md max-h-[400px] flex items-center justify-center">
                <NetworkVideo
                  src={event.eventImage.url}
                  class="max-h-[400px] w-auto object-contain"
                  width={event.eventImage.width || 0}
                  height={event.eventImage.height || 0}
                  controls
                />
              </div>
            ) : (
              <a
                href="#"
                role="button"
                aria-label="Upcoming event"
                data-pswp-src={
                  event.eventImage?.url
                    ? new URL(
                        event.eventImage.url,
                        import.meta.env.PUBLIC_STRAPI_URL,
                      ).toString()
                    : getPlaceholderImage({ text: event.eventImage?.name })
                }
                data-pswp-width={event.eventImage?.width}
                data-pswp-height={event.eventImage?.height}
                class="transition-transform duration-300 ease-in-out hover:[transform:scale(1.02)] hover:shadow-md max-h-[400px] flex items-center justify-center"
              >
                <NetworkImage
                  src={
                    event.eventImage?.url
                      ? new URL(
                          event.eventImage.url,
                          import.meta.env.PUBLIC_STRAPI_URL,
                        ).toString()
                      : getPlaceholderImage({ text: event.eventImage?.name })
                  }
                  class="max-h-[400px] w-auto object-contain"
                  width={event.eventImage?.width || 0}
                  height={event.eventImage?.height || 0}
                />
              </a>
            ),
          )}
        </div>
      </>
    ) : (
      <>
        {/* Show single static fallback image based on language */}
        <div class="block lg:hidden">
          <Image
            src={lang === Locale.KOK ? stayTunedKok : stayTuned}
            alt="Stay Tuned"
            class="w-full"
          />
        </div>

        <div class="hidden lg:flex justify-center">
          <Image
            src={lang === Locale.KOK ? stayTunedKok : stayTuned}
            alt="Stay Tuned"
            class="h-80 w-auto"
          />
        </div>
      </>
    )
  }
</section>

<script>
  import { upcomingEventsLightbox } from "~/scripts/upcoming-events-lightbox";
  upcomingEventsLightbox();
</script>
