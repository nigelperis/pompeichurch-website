---
import { getLangFromUrl, useTranslations } from "~/i18n/utils";
import { cn } from "~/helpers/cn";
import { parseISO } from "date-fns";
import { fromZonedTime } from "date-fns-tz";

// Components
import { listUpcomingEvents } from "~/services/list-upcoming-events";
import NetworkImage from "~/components/ui/network-image.astro";
import EmblaCarousel from "~/components/ui/embla-carousel.astro";
import EmblaCarouselItem from "~/components/ui/embla-carousel-item.astro";
import { Image } from "astro:assets";

import stayTuned from "~/assets/static-assets/stay-tuned.png";
import stayTunedKok from "~/assets/static-assets/stay-tuned-kok.png";
import { getPlaceholderImage } from "~/helpers/get-placeholder-image";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const today = new Date();

const upcomingEvents = await listUpcomingEvents();

const filteredEvents = upcomingEvents.filter((event) => {
  if (!event.eventEndDate) return false;
  const eventDate = parseISO(event.eventEndDate);
  return fromZonedTime(eventDate, "Asia/Kolkata") > today;
});
---

<section
  class="mx-6 mb-6 mt-3 flex flex-col lg:mx-28 lg:min-h-[70svh] lg:justify-evenly"
>
  <h1
    data-aos="fade-right"
    class={cn(
      "mb-6 inline-block border-l-4 border-natgeo-yellow pl-3 font-poppins text-3xl font-extrabold xs:text-2xl lg:text-4xl",
      { "font-noto-sans-kannada": lang === "kok" }
    )}
  >
    {t("landing.upcoming-events")}
  </h1>

  {
    filteredEvents.length > 0 ? (
      <>
        {/* Mobile: Show carousel only if more than one image */}
        <div class="event-gallery -mx-[1.5rem] block md:hidden">
          {filteredEvents.length === 1 ? (
            <a
              href="javascript:void(0);"
              data-pswp-src={filteredEvents[0].eventImage?.url}
              data-pswp-width={filteredEvents[0].eventImage?.width}
              data-pswp-height={filteredEvents[0].eventImage?.height}
            >
              <NetworkImage
                src={
                  filteredEvents[0].eventImage?.url
                    ? new URL(
                        filteredEvents[0].eventImage.url,
                        import.meta.env.STRAPI_URL
                      ).toString()
                    : getPlaceholderImage()
                }
                class="w-full"
                width={filteredEvents[0].eventImage?.width || 0}
                height={filteredEvents[0].eventImage?.height || 0}
              />
            </a>
          ) : (
            <EmblaCarousel showArrows={true}>
              {filteredEvents.map((event) => (
                <EmblaCarouselItem>
                  <a
                    href="javascript:void(0);"
                    data-pswp-src={
                      event.eventImage?.url
                        ? new URL(
                            event.eventImage.url,
                            import.meta.env.STRAPI_URL
                          ).toString()
                        : getPlaceholderImage()
                    }
                    data-pswp-width={event.eventImage?.width}
                    data-pswp-height={event.eventImage?.height}
                  >
                    <NetworkImage
                      src={
                        event.eventImage?.url
                          ? new URL(
                              event.eventImage.url,
                              import.meta.env.STRAPI_URL
                            ).toString()
                          : getPlaceholderImage()
                      }
                      class="w-full"
                      width={event.eventImage?.width || 0}
                      height={event.eventImage?.height || 0}
                    />
                  </a>
                </EmblaCarouselItem>
              ))}
            </EmblaCarousel>
          )}
        </div>

        {/* Web UI */}
        <div class="event-gallery hidden items-center justify-center gap-4 md:flex">
          {filteredEvents.map((event) => (
            <a
              href="javascript:void(0);"
              data-pswp-src={
                event.eventImage?.url
                  ? new URL(
                      event.eventImage.url,
                      import.meta.env.STRAPI_URL
                    ).toString()
                  : getPlaceholderImage()
              }
              data-pswp-width={event.eventImage?.width}
              data-pswp-height={event.eventImage?.height}
              class="transition-transform duration-300 ease-in-out hover:[transform:scale(1.02)] hover:shadow-md max-h-[400px] flex items-center justify-center"
              >
              <NetworkImage
                src={
                  event.eventImage?.url
                    ? new URL(
                        event.eventImage.url,
                        import.meta.env.STRAPI_URL
                      ).toString()
                    : getPlaceholderImage()
                }
                class="max-h-[400px] w-auto object-contain rounded-sm"
                width={event.eventImage?.width || 0}
                height={event.eventImage?.height || 0}
              />
            </a>
          ))}
        </div>
      </>
    ) : (
      <>
        {/* Show single static fallback image based on language */}
        <div class="block lg:hidden">
          <Image
            src={lang === "kok" ? stayTunedKok : stayTuned}
            alt="Stay Tuned"
            class="w-full rounded-lg"
          />
        </div>

        <div class="hidden lg:flex justify-center">
          <Image
            src={lang === "kok" ? stayTunedKok : stayTuned}
            alt="Stay Tuned"
            class="h-80 w-auto rounded-lg"
          />
        </div>
      </>
    )
  }
</section>

<script>
  import "photoswipe/style.css";
  import PhotoSwipeLightbox from "photoswipe/lightbox";

  const eventLightbox = new PhotoSwipeLightbox({
    mainClass: "pswp--custom-icon-colors",
    gallery: ".event-gallery",
    children: "a",
    pswpModule: () => import("photoswipe"),
  });

  eventLightbox.init();
</script>
