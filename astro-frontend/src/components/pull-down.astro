---
import { Icon } from 'astro-icon/components';
import { getLangFromUrl, useTranslations } from '~/i18n/utils';

interface Subtitle {
	commission: string;
	name: string;
}

interface Props {
	convenor: string;
	title: string;
	subtitles?: Subtitle[];
}

const { convenor, title, subtitles } = Astro.props;
const uniqueId = Math.random().toString(36).substring(2, 9);

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="mx-auto my-11 w-full rounded-md border border-yellow-300 shadow-sm">
	<div
		class="dropdown-toggle flex cursor-pointer items-center justify-between rounded-md bg-yellow-100 p-4"
		data-dropdown-id={uniqueId}
	>
		<h3 class="text-xl font-extrabold">{t(`commissions.${title}`)}</h3>
		<Icon
			name="chevron-right"
			class="arrow h-6 w-6 transform text-yellow-600 transition-transform stroke-2"
			data-icon-name="chevron-right"
		/>
	</div>

	<div
		class="dropdown-content overflow-hidden pl-4 pr-4 text-left"
		data-dropdown-id={uniqueId}
	>
		<div class="mt-2">
			<p class="text-xl text-gray-700">
				<strong>{t('commissions.convenor')} : </strong>
				<span class="whitespace-nowrap text-gray-500"
					>{t(`commissions.${convenor}`)}</span
				>
			</p>
		</div>
		<table class="mb-4 mt-4 w-full table-auto">
			<thead>
				<tr>
					<th
						class="border-b-2 pb-2 text-left text-xl font-bold text-yellow-500"
						>{t('commissions.heading')}</th
					>
					<th
						class="border-b-2 pb-2 text-left text-xl font-bold text-yellow-500"
						>{t('commissions.secretary')}</th
					>
				</tr>
			</thead>
			<tbody>
				{
					subtitles?.map((subtitle) => (
						<tr>
							<td class="py-2 text-sm">
								<strong>{t(`commissions.${subtitle.commission}`)}</strong>
							</td>
							<td class="py-2 text-sm text-gray-600">
								{t(`commissions.${subtitle.name}`)}
							</td>
						</tr>
					))
				}
			</tbody>
		</table>
	</div>
</div>

<style>
	.dropdown-content {
		max-height: 0;
		opacity: 0;
		transition:
			max-height 0.4s ease-in-out,
			opacity 0.4s ease-in-out;
		overflow: hidden;
	}
	.dropdown-content.open {
		max-height: 1000px;
		opacity: 1;
	}
	.arrow {
		transition: transform 0.3s ease;
		transform: rotate(90deg);
	}
	.arrow.rotate {
		transform: rotate(-90deg);
	}
	@media (max-width: 768px) {
		.text-lg {
			font-size: 0.875rem;
		}
	}
</style>

<script>
	document.querySelectorAll('.dropdown-toggle').forEach((toggle) => {
		(toggle as HTMLButtonElement).addEventListener(
			'click',
			function (this: HTMLButtonElement) {
				const dropdownId = this.getAttribute('data-dropdown-id');
				const dropdownContent = document.querySelector(
					`.dropdown-content[data-dropdown-id="${dropdownId}"]`,
				);

				if (dropdownContent instanceof HTMLElement) {
					const arrow = this.querySelector('.arrow');
					const isOpen = dropdownContent.classList.contains('open');

					if (isOpen) {
						dropdownContent.style.maxHeight =
							dropdownContent.scrollHeight + 'px';
						dropdownContent.offsetHeight;
						dropdownContent.style.maxHeight = '0';
						dropdownContent.classList.remove('open');
						if (arrow) arrow.classList.remove('rotate');
					} else {
						dropdownContent.style.maxHeight =
							dropdownContent.scrollHeight + 'px';
						dropdownContent.classList.add('open');
						if (arrow) arrow.classList.add('rotate');
					}
				}
			},
		);
	});
</script>
