---
import { Icon } from 'astro-icon/components';

type CarouselType = 'opacityTransition' | 'scroll';

interface Props {
	carouselType?: CarouselType;
	shouldLoop?: boolean;
	shouldDragFreely?: boolean;
	showArrows?: boolean;
	autoScroll?: boolean;
}
const { carouselType, shouldLoop, shouldDragFreely, showArrows, autoScroll } = Astro.props;

const carouselTypeToUse = carouselType ?? 'opacityTransition';
const shouldLoopFlagToUse = shouldLoop ?? true;
const shouldDragFreelyFlagToUse = shouldDragFreely ?? false;
---

<div
	class="embla overflow-hidden p-4 relative"
	data-carousel-type={carouselTypeToUse}
	data-should-loop={String(shouldLoopFlagToUse)}
	data-drag-freely={String(shouldDragFreelyFlagToUse)}
	data-auto-scroll={String(autoScroll)}
>
	<div class="embla_container flex">
		<slot />
	</div>
	{showArrows && (
		<>
			<button class="embla__prev absolute left-1.5 top-1/2 -translate-y-1/2 p-1.5 rounded-full bg-black/40" aria-label="Previous">
			<Icon name="chevron-left" class="text-white" size={30}/>
			</button>
			<button class="embla__next absolute right-1.5 top-1/2 -translate-y-1/2 p-1.5 rounded-full bg-black/40" aria-label="Next">
			<Icon name="chevron-right" class="text-white" size={30}/>
			</button>
		</>
	)}
</div>

<script>
	import EmblaCarousel, {
		type EmblaOptionsType,
		type EmblaCarouselType,
		type EmblaEventType,
	} from 'embla-carousel';

	const TWEEN_FACTOR_BASE = 0.84;
	let tweenFactor = 0;

	const emblaNodes = document.querySelectorAll<HTMLDivElement>('.embla')!;

	function numberWithinRange(number: number, min: number, max: number): number {
		return Math.min(Math.max(number, min), max);
	}

	function setTweenFactor(emblaApi: EmblaCarouselType) {
		tweenFactor = TWEEN_FACTOR_BASE * emblaApi.scrollSnapList().length;
	}

	function tweenOpacity(
		emblaApi: EmblaCarouselType,
		eventName?: EmblaEventType,
	): void {
		const engine = emblaApi.internalEngine();
		const scrollProgress = emblaApi.scrollProgress();
		const slidesInView = emblaApi.slidesInView();
		const isScrollEvent = eventName === 'scroll';

		emblaApi.scrollSnapList().forEach((scrollSnap, snapIndex) => {
			let diffToTarget = scrollSnap - scrollProgress;
			const slidesInSnap = engine.slideRegistry[snapIndex];

			slidesInSnap.forEach((slideIndex) => {
				if (isScrollEvent && !slidesInView.includes(slideIndex)) return;

				if (engine.options.loop) {
					engine.slideLooper.loopPoints.forEach((loopItem) => {
						const target = loopItem.target();

						if (slideIndex === loopItem.index && target !== 0) {
							const sign = Math.sign(target);

							if (sign === -1) {
								diffToTarget = scrollSnap - (1 + scrollProgress);
							}
							if (sign === 1) {
								diffToTarget = scrollSnap + (1 - scrollProgress);
							}
						}
					});
				}

				const tweenValue = 1 - Math.abs(diffToTarget * tweenFactor);
				const opacity = numberWithinRange(tweenValue, 0.4, 1).toString();

				emblaApi.slideNodes()[slideIndex].style.opacity = opacity;
			});
		});
	}

	export const setupTweenOpacity = (
		emblaApi: EmblaCarouselType,
	): (() => void) => {
		const slideNodes = emblaApi.slideNodes();

		setTweenFactor(emblaApi);
		tweenOpacity(emblaApi);

		emblaApi
			.on('reInit', setTweenFactor)
			.on('reInit', tweenOpacity)
			.on('scroll', tweenOpacity)
			.on('slideFocus', tweenOpacity);

		return (): void => {
			slideNodes.forEach((slide) => slide.removeAttribute('style'));
		};
	};

	for (const node of emblaNodes) {
		const carouselType = node.getAttribute('data-carousel-type');
		const shouldLoop = node.getAttribute('data-should-loop');
		const shouldDragFreely = node.getAttribute('data-drag-freely');
		const autoScroll = node.getAttribute('data-auto-scroll'); // Get autoScroll attribute

		const carouselOptions = {
			loop: shouldLoop === 'true' ? true : false,
			dragFree: shouldDragFreely === 'true' ? true : false,
		} satisfies EmblaOptionsType;

		if (carouselType === 'opacityTransition') {
			const plugins = [];

			// Add AutoPlay plugin only if autoScroll is enabled
			if (autoScroll === 'true') {
				const AutoPlay = await import('embla-carousel-autoplay');
				plugins.push(
					AutoPlay.default({
						delay: 3000,
						stopOnInteraction: false,
						jump: false,
					}),
				);
			}

			// Add WheelGesturesPlugin
			const WheelGesturesPlugin = await import('embla-carousel-wheel-gestures');
			plugins.push(WheelGesturesPlugin.WheelGesturesPlugin({}));

			const emblaApi = EmblaCarousel(node, carouselOptions, plugins);

			// Add Arrow Navigation Logic
			const prevButton = node.querySelector('.embla__prev');
			const nextButton = node.querySelector('.embla__next');

			if (prevButton) {
				prevButton.addEventListener('click', () => emblaApi.scrollPrev());
			}
			if (nextButton) {
				nextButton.addEventListener('click', () => emblaApi.scrollNext());
			}

			const removeTweenOpacity = setupTweenOpacity(emblaApi);
			emblaApi.on('destroy', removeTweenOpacity);
		} else {
			const WheelGesturesPlugin = await import('embla-carousel-wheel-gestures');
			const emblaApi = EmblaCarousel(node, carouselOptions, [
				WheelGesturesPlugin.WheelGesturesPlugin({}),
			]);

			// Add Arrow Navigation Logic
			const prevButton = node.querySelector('.embla__prev');
			const nextButton = node.querySelector('.embla__next');

			if (prevButton) {
				prevButton.addEventListener('click', () => emblaApi.scrollPrev());
			}
			if (nextButton) {
				nextButton.addEventListener('click', () => emblaApi.scrollNext());
			}
		}
	}
</script>