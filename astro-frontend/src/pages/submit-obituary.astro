---
import Layout from '~/layouts/layout.astro';
---

<Layout title="Submit an Obituary">
  <main class="mx-auto max-w-5xl bg-white">
    <div class="px-4 py-10 sm:px-6 lg:px-8">
      <h1 class="font-roboto font-black border-natgeo-yellow mb-6 border-l-4 pl-3 text-3xl lg:text-4xl">
        Submit an Obituary
      </h1>

      <div class="flex flex-col lg:flex-row gap-10">
        <form class="flex-1 space-y-6" enctype="multipart/form-data" id="obituaryForm">
          <!-- Full Name English -->
          <div>
            <label for="englishName" class="block text-sm font-medium text-gray-700 mb-1">
              Full Name (English) <span class="text-red-600">*</span>
            </label>
            <input type="text" name="englishName" id="englishName" required placeholder="Enter Deceased Name in English"
              class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
          </div>

          <!-- Full Name Konkani -->
          <div>
            <label for="konkaniName" class="block text-sm font-medium text-gray-700 mb-1">
              Full Name (Konkani)
            </label>
            <input type="text" name="konkaniName" id="konkaniName" placeholder="Enter Deceased Name in Konkani"
              class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
          </div>

          <!-- Age -->
          <div>
            <label for="age" class="block text-sm font-medium text-gray-700 mb-1">
              Age <span class="text-red-600">*</span>
            </label>
            <input type="number" name="age" id="age" required placeholder="Enter Age"
              class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
          </div>

          <!-- Ward -->
          <div class="relative">
            <label for="ward" class="block text-sm font-medium text-gray-700 mb-1">
              Ward <span class="text-red-600">*</span>
            </label>
            <select name="ward" id="ward" required
              class="block w-full border border-gray-300 p-3 pr-10 appearance-none focus:outline-none text-gray-700">
              <option value="" disabled selected>Select Ward</option>
              <option value="Addoor">Addoor</option>
              <option value="Church">Church</option>
              <option value="Gurpur">Gurpur</option>
              <option value="Kandar A">Kandar A</option>
              <option value="Kandar B">Kandar B</option>
              <option value="Kowdoor A">Kowdoor A</option>
              <option value="Kowdoor B">Kowdoor B</option>
              <option value="Monel">Monel</option>
              <option value="Pompei A">Pompei A</option>
              <option value="Pompei B">Pompei B</option>
            </select>
            <!-- Dropdown Icon -->
            <div class="pointer-events-none absolute right-3 top-1/2 text-gray-600">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>

          <!-- Date of Death -->
          <div class="relative">
            <label for="dateOfDeath" class="block text-sm font-medium text-gray-700 mb-1">
              Date of Death <span class="text-red-600">*</span>
            </label>
            <input type="date" name="dateOfDeath" id="dateOfDeath" required
              class="block w-full text-gray-700 border border-gray-300 p-3 pr-10 appearance-none focus:outline-none [&::-webkit-calendar-picker-indicator]:opacity-0 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-clear-button]:appearance-none" />
            <!-- Calendar Icon -->
            <div class="pointer-events-none absolute right-3 top-1/2 text-gray-600">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round"
                  d="M8 7V3m8 4V3m-9 8h10m-13 7a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2H6a2 2 0 00-2 2v10z" />
              </svg>
            </div>
          </div>

          <!-- Relation Type -->
          <div class="relative">
            <label for="relationType" class="block text-sm font-medium text-gray-700 mb-1">
              Relation Type
            </label>
            <select name="relationType" id="relationType"
              class="block text-gray-700 w-full border border-gray-300 p-3 pr-10 appearance-none focus:outline-none placeholder-gray-600">
              <option value="" disabled selected>Select Relation</option>
              <option value="W/o">Wife of</option>
              <option value="H/o">Husband of</option>
              <option value="S/o">Son of</option>
              <option value="D/o">Daughter of</option>
            </select>
            <!-- Dropdown Icon -->
            <div class="pointer-events-none absolute right-3 top-1/2 text-gray-600">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>

          <!-- Relative's Name -->
          <div>
            <label for="relNameEn" class="block text-sm font-medium text-gray-700 mb-1">
              Relation Name (English)
            </label>
            <input type="text" name="relNameEn" id="relNameEn" placeholder="Enter Relation Name in English"
              class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
          </div>

          <div>
            <label for="relNameKok" class="block text-sm font-medium text-gray-700 mb-1">
              Relation Name (Konkani)
            </label>
            <input type="text" name="relNameKok" id="relNameKok" placeholder="Enter Relation Name in Konakani"
              class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
          </div>

          <!-- Sender Name -->
          <div>
            <label for="senderName" class="block text-sm font-medium text-gray-700 mb-1">
              Sender's Name <span class="text-red-600">*</span>
            </label>
            <input type="text" name="senderName" id="senderName" required placeholder="Enter Your Name"
              class="block w-full border border-gray-300 p-3 focus:outline-none placeholder-gray-600" />
          </div>

          <!-- Honeypot Spam Trap (hidden) -->
          <div class="hidden">
            <label for="website">Website</label>
            <input type="text" name="website" id="website" tabindex="-1" autocomplete="off" />
          </div>

          <!-- Upload Image -->
          <div>
            <label for="imageFile" class="block text-sm font-medium text-gray-600 mb-1">
              Upload Image <span class="text-red-600">*</span>
            </label>
            <input type="file" name="imageFile" id="imageFile" accept="image/*" required
              class="w-full text-gray-600 font-medium text-sm bg-white border border-gray-300 file:cursor-pointer cursor-pointer file:border-0 file:py-3 file:px-4 file:mr-4 file:bg-gray-100 file:hover:bg-gray-200 file:text-gray-600"
              onchange="previewImage(event)" />
            <p class="text-xs text-red-600 mt-1">* Image should be less than 500KB, .jpg/.png only</p>
          </div>

          <!-- Submit Button -->
          <div>
            <button type="submit"
              class="w-full border border-gray-700 font-medium py-3 px-4 hover:bg-natgeo-yellow transition">
              Submit
            </button>
          </div>

          <p id="submit-status" class="text-center text-sm text-gray-600"></p>
        </form>

        <!-- Right Preview -->
        <div class="w-full lg:w-[260px] space-y-2">
          <h2 class="text-lg font-semibold text-gray-700">Preview</h2>
          <div class="border border-gray-300 overflow-hidden bg-white w-full transition-all duration-200 ease-in-out">
            <div class="aspect-[4/5] bg-gray-100">
              <img id="previewImg" src="" alt="Image Preview" class="object-cover w-full h-full hidden" />
            </div>
            <div class="p-3 font-noto-sans-kannada space-y-1 text-slate-800 text-sm">
              <h3 id="p_name" class="line-clamp-1 text-xl font-bold text-slate-900">Deceased Name</h3>
              <p id="p_relation" class="line-clamp-1 md:text-base text-lg text-slate-700">Relation Name</p>
              <p id="p_age" class="line-clamp-1 md:text-base text-lg text-slate-700">Age</p>
              <p id="p_ward" class="line-clamp-1 md:text-base text-lg text-slate-700">Ward</p>
              <p id="p_death" class="line-clamp-1 md:text-base text-lg text-slate-700">Date of Death</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Toast Notification -->
  <div id="toast"
    class="fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-green-600 text-white px-4 py-3 text-sm font-semibold shadow-lg rounded z-50 opacity-0 transition-opacity duration-300 pointer-events-none">
    Your submission was successful!
  </div>

  <script>
    window.addEventListener('DOMContentLoaded', () => {
      function showToast(message = "Your submission was successful!") {
        const toast = document.getElementById("toast");
        if (toast) {
          toast.textContent = message;
          toast.classList.remove("opacity-0");
          toast.classList.add("opacity-100");

          setTimeout(() => {
            toast.classList.remove("opacity-100");
            toast.classList.add("opacity-0");
          }, 6000);
        }
      }

      function updatePreview(lang = "en") {
        const form = document.querySelector("form");
        if (!form) return;
        const formData = new FormData(form);

        const name = formData.get("englishName") || "Name";
        const relationType = formData.get("relationType") || "";
        const formattedRelation = relationType ? `${relationType}:` : "";
        const relNameEn = formData.get("relNameEn") || "";
        const age = formData.get("age") || "";
        const ward = formData.get("ward") || "";
        const dateOfDeath = formData.get("dateOfDeath") || "";

        const elName = document.getElementById("p_name");
        const elRel = document.getElementById("p_relation");
        const elAge = document.getElementById("p_age");
        const elWard = document.getElementById("p_ward");
        const elDeath = document.getElementById("p_death");

        if (elName) elName.textContent = typeof name === "string" ? name : "";
        if (elRel) elRel.textContent = `${formattedRelation} ${typeof relNameEn === "string" ? relNameEn : ""}`;
        if (elAge) elAge.textContent = typeof age === "string" && age ? `Age: ${age}` : "";
        if (elWard) elWard.textContent = typeof ward === "string" && ward ? `Ward: ${ward}` : "";
        if (elDeath) elDeath.textContent = typeof dateOfDeath === "string" && dateOfDeath ? `Death: ${dateOfDeath}` : "";
      }

      /** @type {any} */
      (window as any).previewImage = function (event: any) {
        const file = event.target.files && event.target.files[0];
        const previewImg = document.getElementById("previewImg");
        if (!(previewImg instanceof HTMLImageElement)) return;
        if (!file) {
          previewImg.classList.add("hidden");
          return;
        }
        if (file.size > 500 * 1024) {
          alert("Image must be less than 500KB");
          event.target.value = "";
          previewImg.classList.add("hidden");
          return;
        }
        const reader = new FileReader();
        reader.onload = () => {
          if (typeof reader.result === "string") {
            previewImg.src = reader.result;
            previewImg.classList.remove("hidden");
          }
        };
        reader.readAsDataURL(file);
      };

      const form = document.querySelector("form");
      if (form) {
        form.addEventListener("input", () => updatePreview());
        form.addEventListener("submit", (event) => {
          event.preventDefault();
          // Honeypot check
          const websiteInput = form.querySelector('input[name="website"]');
          if (
            websiteInput &&
            websiteInput instanceof HTMLInputElement &&
            websiteInput.value !== ""
          ) {
            alert("Spam detected.");
            return false;
          }
          const formData = new FormData(form);
          const imageFile = formData.get("imageFile");
          if (imageFile instanceof File && imageFile.size > 500 * 1024) {
            alert("Image must be less than 500KB");
            return;
          }
          // Backend submission
          showToast("Your submission was successful!");
          form.reset();
          const previewImg = document.getElementById("previewImg");
          if (previewImg instanceof HTMLImageElement) {
            previewImg.src = "";
            previewImg.classList.add("hidden");
          }
          updatePreview();
        });
      }
    });
  </script>

</Layout>